//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.7

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]
#[sea_orm(table_name = "j_reit_buildings")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: String,
    pub is_office: i8,
    pub is_retail: i8,
    pub is_hotel: i8,
    pub is_logistic: i8,
    pub is_residential: i8,
    pub is_health_care: i8,
    pub is_other: i8,
    pub office_building_id: Option<i64>,
    pub residential_building_id: Option<i64>,
    #[sea_orm(column_type = "Text")]
    pub name: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub address: Option<String>,
    pub city_id: i64,
    #[sea_orm(column_type = "Double")]
    pub latitude: f64,
    #[sea_orm(column_type = "Double")]
    pub longitude: f64,
    #[sea_orm(column_type = "Text", nullable)]
    pub nearest_station: Option<String>,
    pub completed_year: Option<i64>,
    pub completed_month: Option<i64>,
    #[sea_orm(column_type = "Double", nullable)]
    pub gross_floor_area: Option<f64>,
    pub basement: Option<i64>,
    pub groundfloor: Option<i64>,
    #[sea_orm(column_type = "Text", nullable)]
    pub structure: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub floor_plan: Option<String>,
    #[sea_orm(column_type = "Double", nullable)]
    pub land: Option<f64>,
    #[sea_orm(column_type = "Double", nullable)]
    pub building_coverage_ratio: Option<f64>,
    #[sea_orm(column_type = "Double", nullable)]
    pub floor_area_ratio: Option<f64>,
    #[sea_orm(column_name = "_snowflake_deleted")]
    pub snowflake_deleted: i8,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::cities::Entity",
        from = "Column::CityId",
        to = "super::cities::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Cities,
    #[sea_orm(has_many = "super::j_reit_mizuho_id_mappings::Entity")]
    JReitMizuhoIdMappings,
    #[sea_orm(has_many = "super::j_reit_transactions::Entity")]
    JReitTransactions,
}

impl Related<super::cities::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Cities.def()
    }
}

impl Related<super::j_reit_mizuho_id_mappings::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::JReitMizuhoIdMappings.def()
    }
}

impl Related<super::j_reit_transactions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::JReitTransactions.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
