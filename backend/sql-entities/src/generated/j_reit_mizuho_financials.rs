//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.7

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]
#[sea_orm(table_name = "j_reit_mizuho_financials")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: String,
    pub j_reit_mizuho_building_id: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub fiscal_period: Option<String>,
    pub fiscal_period_start_date: Date,
    pub fiscal_period_end_date: Date,
    pub fiscal_period_operating_day: i64,
    pub rental_income: Option<i64>,
    pub parking_income: Option<i64>,
    pub common_area_charge: Option<i64>,
    pub other_rental_income: Option<i64>,
    pub other_income: Option<i64>,
    pub property_management_fee: Option<i64>,
    pub maintenance_fee: Option<i64>,
    pub utility_cost: Option<i64>,
    pub security_fee: Option<i64>,
    pub repair_cost: Option<i64>,
    pub cleaning_fee: Option<i64>,
    pub insurance_cost: Option<i64>,
    pub real_estate_tax: Option<i64>,
    pub common_area_expense: Option<i64>,
    pub other_operating_expense: Option<i64>,
    pub capital_expenditure: Option<i64>,
    pub net_operating_income: Option<i64>,
    pub depriciation: Option<i64>,
    pub net_income: Option<i64>,
    pub free_cash_flow: Option<i64>,
    #[sea_orm(column_type = "Double", nullable)]
    pub occupancy_rate: Option<f64>,
    pub number_of_tenants: Option<i64>,
    pub security_deposit_balance: Option<i64>,
    pub appraisal_price: Option<i64>,
    #[sea_orm(column_type = "Double", nullable)]
    pub appraisal_cap_rate: Option<f64>,
    #[sea_orm(column_type = "Double", nullable)]
    pub appraisal_discount_rate: Option<f64>,
    pub direct_capitalization_price: Option<i64>,
    #[sea_orm(column_type = "Double", nullable)]
    pub cap_rate: Option<f64>,
    pub discount_cash_flow_price: Option<i64>,
    #[sea_orm(column_type = "Double", nullable)]
    pub discount_rate: Option<f64>,
    #[sea_orm(column_type = "Double", nullable)]
    pub terminal_cap_rate: Option<f64>,
    pub acquisition_price: Option<i64>,
    pub book_value: Option<i64>,
    pub scheduled_property_tax: Option<i64>,
    #[sea_orm(column_type = "Double", nullable)]
    pub net_leasable_area_total: Option<f64>,
    pub year_to_date_net_operating_income: Option<i64>,
    pub rental_income_per_tsubo: Option<i64>,
    #[sea_orm(column_type = "Double", nullable)]
    pub net_operating_income_yield: Option<f64>,
    #[sea_orm(column_type = "Double", nullable)]
    pub net_cash_flow_cap_rate: Option<f64>,
    #[sea_orm(column_name = "_snowflake_deleted")]
    pub snowflake_deleted: i8,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::j_reit_mizuho_id_mappings::Entity",
        from = "Column::JReitMizuhoBuildingId",
        to = "super::j_reit_mizuho_id_mappings::Column::JReitMizuhoBuildingId",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    JReitMizuhoIdMappings,
}

impl Related<super::j_reit_mizuho_id_mappings::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::JReitMizuhoIdMappings.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
