//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.7

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]
#[sea_orm(table_name = "j_reit_appraisals")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: String,
    pub appraisal_price: Option<i64>,
    pub appraisal_date: Option<Date>,
    #[sea_orm(column_type = "Text", nullable)]
    pub appraisal_company: Option<String>,
    pub net_income: Option<i64>,
    pub direct_capitalization_price: Option<i64>,
    pub operating_revenue: Option<i64>,
    pub potential_gross_income: Option<i64>,
    pub operating_costs: Option<i64>,
    pub maintenance_cost: Option<i64>,
    pub utility_cost: Option<i64>,
    pub repair_cost: Option<i64>,
    pub tenant_acquisition_costs: Option<i64>,
    pub property_management_fee: Option<i64>,
    pub other_operating_expense: Option<i64>,
    pub net_operating_income: Option<i64>,
    pub temporary_funds_profit: Option<i64>,
    pub capital_expenditure: Option<i64>,
    pub net_cash_flow: Option<i64>,
    #[sea_orm(column_type = "Double", nullable)]
    pub cap_rate: Option<f64>,
    pub discount_cash_flow_price: Option<i64>,
    #[sea_orm(column_type = "Double", nullable)]
    pub discount_rate: Option<f64>,
    #[sea_orm(column_type = "Double", nullable)]
    pub terminal_cap_rate: Option<f64>,
    pub price_by_cost_approach: Option<i64>,
    pub building_price_by_cost_approach: Option<i64>,
    pub land_price_by_cost_approach: Option<i64>,
    #[sea_orm(column_name = "_snowflake_deleted")]
    pub snowflake_deleted: i8,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::j_reit_transactions::Entity")]
    JReitTransactions,
}

impl Related<super::j_reit_transactions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::JReitTransactions.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
