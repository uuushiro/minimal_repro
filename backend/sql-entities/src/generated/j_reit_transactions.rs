//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.7

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]
#[sea_orm(table_name = "j_reit_transactions")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: String,
    pub j_reit_building_id: String,
    pub j_reit_corporation_id: String,
    pub combined_transaction_id: String,
    pub j_reit_appraisal_id: Option<String>,
    pub transaction_date: Date,
    pub transaction_price: Option<i64>,
    pub transaction_category: i8,
    #[sea_orm(column_type = "Text", nullable)]
    pub transaction_partner: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub land_ownership_type: Option<String>,
    #[sea_orm(column_type = "Double", nullable)]
    pub land_ownership_ratio: Option<f64>,
    #[sea_orm(column_type = "Text", nullable)]
    pub building_ownership_type: Option<String>,
    #[sea_orm(column_type = "Double", nullable)]
    pub building_ownership_ratio: Option<f64>,
    #[sea_orm(column_type = "Text", nullable)]
    pub property_manager: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub trustee: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub pml_assessment_company: Option<String>,
    #[sea_orm(column_type = "Double", nullable)]
    pub earthquake_pml: Option<f64>,
    #[sea_orm(column_type = "Text", nullable)]
    pub master_lease_company: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub master_lease_type: Option<String>,
    pub leasable_units: Option<i64>,
    pub leased_units: Option<i64>,
    #[sea_orm(column_type = "Double", nullable)]
    pub leasable_area: Option<f64>,
    #[sea_orm(column_type = "Double", nullable)]
    pub total_leasable_area: Option<f64>,
    #[sea_orm(column_type = "Double", nullable)]
    pub leased_area: Option<f64>,
    pub number_of_tenants: Option<i64>,
    #[sea_orm(column_type = "Double", nullable)]
    pub occupancy_rate: Option<f64>,
    pub monthly_rent_and_fees: Option<i64>,
    pub security_deposit: Option<i64>,
    pub trust_start_date: Option<Date>,
    pub trust_end_date: Option<Date>,
    pub press_release_date: Option<Date>,
    pub is_bulk: i8,
    pub apportioned_transaction_price: Option<i64>,
    #[sea_orm(column_name = "_snowflake_deleted")]
    pub snowflake_deleted: i8,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::j_reit_appraisals::Entity",
        from = "Column::JReitAppraisalId",
        to = "super::j_reit_appraisals::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    JReitAppraisals,
    #[sea_orm(
        belongs_to = "super::j_reit_buildings::Entity",
        from = "Column::JReitBuildingId",
        to = "super::j_reit_buildings::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    JReitBuildings,
    #[sea_orm(
        belongs_to = "super::j_reit_corporations::Entity",
        from = "Column::JReitCorporationId",
        to = "super::j_reit_corporations::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    JReitCorporations,
}

impl Related<super::j_reit_appraisals::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::JReitAppraisals.def()
    }
}

impl Related<super::j_reit_buildings::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::JReitBuildings.def()
    }
}

impl Related<super::j_reit_corporations::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::JReitCorporations.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
